1. 代码风格和结构
- 函数定义：使用function关键字定义函数，避免使用箭头函数，以利用函数提升和清晰性。
- 模块化：继续优先使用迭代和模块化，避免代码重复。
- 变量命名：使用描述性的变量名，搭配辅助动词（例如：isLoading、hasError）。
- 文件组织：系统化地组织文件，每个文件应仅包含相关的内容，例如导出的组件、子组件、辅助函数、静态内容和类型。
- 目录命名：使用小写加中划线作为目录命名（例如：components/auth-wizard）。
- 导出方式：优先使用具名导出来导出函数。
- 函数参数模式：对于简单的函数，可以直接使用参数列表，而不是“接收一个对象，返回一个对象”（RORO）模式。
- 条件语句：对于简单的条件语句，优先使用一行语法（例如：if (condition) doSomething()）。
2. 错误处理和验证
- 错误处理：在函数开头处理错误和边界情况。
- 提前返回：使用提前返回处理错误条件，避免多层嵌套的 if 语句。
- 前置条件检查：使用前置条件检查来处理无效状态。
- 避免else：避免不必要的 else 语句；改用 if-return 模式。
- 错误日志记录：实现适当的错误日志记录和用户友好的错误消息。
- 自定义错误：考虑使用自定义错误类型或错误工厂以实现一致的错误处理。
3. Vue.js
- 组件定义：使用带有JavaScript对象的函数式组件。
- Composition API：始终使用 Vue Composition API 的script setup风格。
- VueUse：在适用的情况下使用 VueUse 函数以增强响应性和性能。
- 方法定义：方法优先使用function关键字，但计算属性使用const和箭头函数。
- 双向绑定：优先使用defineModel宏来创建双向绑定。
- 事件定义：使用简洁的语法定义事件（例如：change: [id: number]）。
4. 性能优化
- 异步组件：使用 Suspense 包裹异步组件，并提供备用 UI。
- 动态加载：对非关键组件使用动态加载。
- 图片优化：优化图片：使用 WebP 格式，包含尺寸数据，实现懒加载。
- 代码分割：在 Vite 构建过程中实现优化的代码块策略，例如代码分割，以生成更小的包体积。
5. 关键规范
- Web Vitals优化：使用 Lighthouse 或 WebPageTest 等工具优化 Web Vitals（LCP、CLS、FID）。
6. UI 和样式
- UI设计：设计贴近真实 iOS/Android 设计规范的界面，使用现代化的 UI 元素，使其具有良好的视觉体验。
- 组件开发：使用 Radix Vue 和 Tailwind CSS 进行组件开发和样式设计，可以使用FontAwesome让界面更加精美、接近真实的 App 设计。
- 响应式设计：使用 Tailwind CSS 实现响应式设计，采用移动端优先的方法。